import{ad as t,H as p,I as o,F as n,U as s,O as e,ae as c,X as l}from"./framework-d186cff1.js";const i={},u=n("h2",{id:"背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),s(" 背景")],-1),r={href:"http://drops.wooyun.org/papers/1409",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"推荐阅读：",-1),k={href:"http://joncave.co.uk/2013/03/dangers-of-type-coercion-and-remote-management/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0166",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"利用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#利用","aria-hidden":"true"},"#"),s(" 利用")],-1),h=n("p",null,"具体的原理请看上面这篇文章，这里就不多重复了。",-1),b=n("p",null,"也就是说，我们只要把cookies设置成 “admin|$expiration|0”,就可以登陆后台了。",-1),_=n("p",null,"思路是：",-1),f=n("li",null,"1.尝试$expiration构造Cookie",-1),g={href:"http://www.example.com/wp-admin/profile.php",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"3.多线程,有条件使用多机器",-1),y=c(`<h2 id="题外话" tabindex="-1"><a class="header-anchor" href="#题外话" aria-hidden="true">#</a> 题外话</h2><p>在写利用脚本的时候发现，python的urllib2.urlopen会遇到301/302自动跳转的问题，这样无法判断出http状态码是否是302。来分析看看为什么吧。😃</p><p>打开urllib2源码，刚开头就看到了相关文档：</p><p><code>The HTTPRedirectHandler automatically deals with HTTP 301, 302, 303 and 307 redirect errors.</code></p><p>仔细阅读源码看一下调用过程：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#调用urlopen的文件</span>
response <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
<span class="token comment">#urllib2.py ,line 127, in urlopen</span>
<span class="token keyword">return</span> _opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
<span class="token comment">#urllib2.py ,line 410, in open</span>
response <span class="token operator">=</span> meth<span class="token punctuation">(</span>req<span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token comment">#urllib2.py ,line 523, in http_response</span>
response <span class="token operator">=</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>error<span class="token punctuation">(</span>
                <span class="token string">&#39;http&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> hdrs<span class="token punctuation">)</span>
<span class="token comment">#urllib2.py ,line 442, in error</span>
result <span class="token operator">=</span> self<span class="token punctuation">.</span>_call_chain<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token comment">#urllib2.py ,line 382, in _call_chain</span>
result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token comment">#urllib2.py ,line 608, in http_error_302</span>
new <span class="token operator">=</span> self<span class="token punctuation">.</span>redirect_request<span class="token punctuation">(</span>req<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> newurl<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里我想已经够清楚了(执行到了我们之前在文档看到的HTTPRedirectHandler)，最后的redirect_request：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">redirect_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> newurl<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Return a Request or None in response to a redirect.

    This is called by the http_error_30x methods when a
    redirection response is received.  If a redirection should
    take place, return a new Request to allow http_error_30x to
    perform the redirect.  Otherwise, raise HTTPError if no-one
    else should try to handle this url.  Return None if you can&#39;t
    but another Handler might.
    &quot;&quot;&quot;</span>
    m <span class="token operator">=</span> req<span class="token punctuation">.</span>get_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">,</span> <span class="token number">303</span><span class="token punctuation">,</span> <span class="token number">307</span><span class="token punctuation">)</span> <span class="token keyword">and</span> m <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;HEAD&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">or</span> code <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">,</span> <span class="token number">303</span><span class="token punctuation">)</span> <span class="token keyword">and</span> m <span class="token operator">==</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Strictly (according to RFC 2616), 301 or 302 in response</span>
        <span class="token comment"># to a POST MUST NOT cause a redirection without confirmation</span>
        <span class="token comment"># from the user (of urllib2, in this case).  In practice,</span>
        <span class="token comment"># essentially all clients do redirect in this case, so we</span>
        <span class="token comment"># do the same.</span>
        <span class="token comment"># be conciliant with URIs containing a space</span>
        newurl <span class="token operator">=</span> newurl<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%20&#39;</span><span class="token punctuation">)</span>
        newheaders <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
                          <span class="token keyword">if</span> k<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&quot;content-length&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content-type&quot;</span><span class="token punctuation">)</span>
                         <span class="token punctuation">)</span>
        <span class="token keyword">return</span> Request<span class="token punctuation">(</span>newurl<span class="token punctuation">,</span>
                       headers<span class="token operator">=</span>newheaders<span class="token punctuation">,</span>
                       origin_req_host<span class="token operator">=</span>req<span class="token punctuation">.</span>get_origin_req_host<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                       unverifiable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> HTTPError<span class="token punctuation">(</span>req<span class="token punctuation">.</span>get_full_url<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> fp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以GET遇到状态码（301, 302, 303, 307）时会Request跳转到新的地址，所以我们无法获取这些状态码(没有保存下来)。</p><p>我们需要自己写一个hander来重写30x方法处理这种情况，保存状态码。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#-*- coding:utf-8 -*-</span>
<span class="token keyword">import</span> urllib2
<span class="token comment">#自定义hander</span>
<span class="token keyword">class</span> <span class="token class-name">SmartRedirectHandler</span><span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>HTTPRedirectHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">http_error_301</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
		result <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>HTTPRedirectHandler<span class="token punctuation">.</span>http_error_301<span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>  
		result<span class="token punctuation">.</span>status <span class="token operator">=</span> code
		<span class="token keyword">return</span> result  
	<span class="token keyword">def</span> <span class="token function">http_error_302</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
		result <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>HTTPRedirectHandler<span class="token punctuation">.</span>http_error_302<span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>
		result<span class="token punctuation">.</span>status <span class="token operator">=</span> code
		<span class="token keyword">return</span> result

request <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">&quot;http://www.example.com/wp-admin/profile.php&quot;</span><span class="token punctuation">)</span> 
opener <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>SmartRedirectHandler<span class="token punctuation">)</span>
urllib2<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>
response <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
<span class="token keyword">print</span> response<span class="token punctuation">.</span>status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就可以正常返回301/302状态码。</p>`,12),q={href:"http://drops.wooyun.org/papers/1404",target:"_blank",rel:"noopener noreferrer"};function T(x,H){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("首先看这篇文章：WordPress 3.8.2 cookie伪造漏洞再分析 "),n("a",r,[s("http://drops.wooyun.org/papers/1409"),e(a)])]),d,n("p",null,[n("a",k,[s("The dangers of type coercion and remote management plugins"),e(a)])]),n("p",null,[s("WordPress 3.8.2修复的一个重要漏洞是cookie伪造漏洞 "),n("a",m,[s("(CVE-2014-0166)"),e(a)]),s("。该漏洞可以被攻击者利用通过伪造身份验证Cookie，登陆网站。")]),v,h,b,_,n("ul",null,[f,n("li",null,[s("2.GET请求到"),n("a",g,[s("http://www.example.com/wp-admin/profile.php"),e(a)]),s(",根据返回的http header判断是否跳转,如为200则成功")]),w]),y,n("p",null,[s("另外，WordPress 3.8.2补丁分析 HMAC timing attack "),n("a",q,[s("http://drops.wooyun.org/papers/1404"),e(a)]),s(" 思路确实很赞。")])])}const R=t(i,[["render",T],["__file","WordPress 3.8.2 cookie伪造漏洞及Python使用urllib2出现30x跳转的问题.html.vue"]]);export{R as default};
