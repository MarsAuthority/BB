import{ad as e,H as o,I as c,F as n,U as s,O as t,ae as p,X as i}from"./framework-0d2eacdd.js";const l={},u=p('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>多读书，读好书很重要，网上的有些精品资源只能在线一页一页翻着看，颇不方便，故研究了一下Calibre，用其强大的爬虫功能抓取这些文章，并自动生成带目录索引的电子书文件(mobi、epub)，以便在Kindle上随时阅读。</p><h2 id="编写recipe脚本" tabindex="-1"><a class="header-anchor" href="#编写recipe脚本" aria-hidden="true">#</a> 编写recipe脚本</h2><p><code>Calibre</code> 就不再介绍了，可以自行百度。</p><p>recipe 其实就是一段python代码，定义 calibre 的抓取行为，通过 Beautiful Soup 筛选出页面中要抓取的元素。相关文档参考：</p><blockquote><p>Beautiful Soup 4.2.0 DocumentationAPI Documentation for recipes</p></blockquote><p>简单来说，recipe 是一个固定的模板。找到要抓取的目录和每个目录项链接到相应内容页的正文的Dom元素即可。</p>',7),r={href:"http://jinyong.ylib.com/works/v1.0/works/poem.htm",target:"_blank",rel:"noopener noreferrer"},k=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#-*-coding:utf-8-*-</span>
<span class="token keyword">from</span> calibre<span class="token punctuation">.</span>web<span class="token punctuation">.</span>feeds<span class="token punctuation">.</span>recipes <span class="token keyword">import</span> BasicNewsRecipe

<span class="token keyword">class</span> <span class="token class-name">LouisChaPoem</span><span class="token punctuation">(</span>BasicNewsRecipe<span class="token punctuation">)</span><span class="token punctuation">:</span>
	title <span class="token operator">=</span> <span class="token string">u&#39;诗词金庸&#39;</span>
	description <span class="token operator">=</span> <span class="token string">u&#39;金庸小說裡出現過的詩詞何其多！但你可知道，書中主角口中吟唱的詞句，究竟是金庸自己作的，還是「移花接木」引過來的呢？卻又是引自何處，原典為何？哈！好奇吧！在閱讀金庸小說之際，千萬別忽略了這許多有趣的中國傳統文化事物。就讓我們從古典詩詞開始尋根，一探金庸文化「寶山」，可別空手而回哦！ &#39;</span>
	url_prefix <span class="token operator">=</span> <span class="token string">&#39;http://jinyong.ylib.com/works/v1.0/works/&#39;</span>
	no_stylesheets <span class="token operator">=</span> <span class="token boolean">True</span>
	keep_only_tags <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">#保留文章正文</span>
		<span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;font&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;#003366&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	  	<span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;td&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;colspan&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">]</span>
	remove_tags <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">#去除多余元素</span>
		<span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;font&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;#CC3333&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">]</span>
	max_articles_per_feed <span class="token operator">=</span> <span class="token number">999</span> <span class="token comment">#爬取的文章数目限制</span>
	<span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> link<span class="token punctuation">.</span>string
	<span class="token keyword">def</span> <span class="token function">parse_index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		soup <span class="token operator">=</span> self<span class="token punctuation">.</span>index_to_soup<span class="token punctuation">(</span><span class="token string">&#39;http://jinyong.ylib.com/works/v1.0/works/poem.htm&#39;</span><span class="token punctuation">)</span>
		articles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
		<span class="token keyword">for</span> i <span class="token keyword">in</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;new&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">for</span> link <span class="token keyword">in</span> i<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
				title <span class="token operator">=</span> self<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span>link<span class="token punctuation">)</span>
				title <span class="token operator">=</span> title<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
				url <span class="token operator">=</span> self<span class="token punctuation">.</span>url_prefix<span class="token operator">+</span>link<span class="token punctuation">[</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">]</span>
				a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> title <span class="token punctuation">,</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span>url<span class="token punctuation">}</span>
				articles<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
		ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>title<span class="token punctuation">,</span>articles<span class="token punctuation">)</span><span class="token punctuation">]</span>
		<span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码保存为 <code>LouisChaPoem.recipe</code> 。整个代码比较简单明了，就不再赘述细节了。运行 <code>ebook-convert LouisChaPoem.recipe LouisChaPoem.epub</code> 就可以抓取了。（ebook-convert在calibre的安装目录下）</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>看看效果吧，正文：</p><figure><img src="https://cdn.jsdelivr.net/gh/MarsAuthority/sec_pic@master/uPic/2023-02/KmYDsZ.jpg" alt="KmYDsZ" tabindex="0" loading="lazy"><figcaption>KmYDsZ</figcaption></figure><p>最后推荐一些写好的Recipe：</p>`,6),d={href:"https://github.com/ericzhang-cn/kindle-open-books",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/mine260309/calibre_recipes",target:"_blank",rel:"noopener noreferrer"};function v(b,h){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("下面以抓取《詩詞金庸》"),n("a",r,[s("http://jinyong.ylib.com/works/v1.0/works/poem.htm"),t(a)]),s(" 为例：")]),k,n("blockquote",null,[n("p",null,[n("a",d,[s("@ericzhang-cn"),t(a)])])]),n("blockquote",null,[n("p",null,[n("a",m,[s("@mine260309"),t(a)])])])])}const _=e(l,[["render",v],["__file","利用Calibre.recipe爬取文章.html.vue"]]);export{_ as default};
