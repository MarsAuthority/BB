import{ac as o,H as t,I as l,F as n,U as s,O as e,ad as p,X as c}from"./framework-fca3d3a7.js";const r={},i=n("h2",{id:"什么是opcode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是opcode","aria-hidden":"true"},"#"),s(" 什么是opcode")],-1),u=n("p",null,"当Zend Engine解析PHP脚本的时候，会对脚本进行词法、语法分析，然后编译成opcode来执行，类似JVM中的字节码(byte codes)，只不过opcode不会像class文件那种存在磁盘，而是在内存中直到PHP的生命周期结束。",-1),d=n("p",null,"盗一张图：",-1),k=n("figure",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/MarsAuthority/sec_pic@master/uPic/2023-02/DlYw5G.jpg",alt:"opcode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"opcode")],-1),m={href:"http://www.php-internals.com/book/?p=chapt02/02-03-02-opcode",target:"_blank",rel:"noopener noreferrer"},v={href:"http://blog.csdn.net/21aspnet/article/details/7002644",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>Zend Engine中编译和执行PHP脚本的关键函数是：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ZEND_API zend_op_array <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>zend_compile_file<span class="token punctuation">)</span><span class="token punctuation">(</span>zend_file_handle <span class="token operator">*</span>file_handle<span class="token punctuation">,</span> <span class="token keyword">int</span> type TSRMLS_DC<span class="token punctuation">)</span><span class="token punctuation">;</span>
ZEND_API <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>zend_execute<span class="token punctuation">)</span><span class="token punctuation">(</span>zend_op_array <span class="token operator">*</span>op_array TSRMLS_DC<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>VLD就是通过HOOK Zend Engine中的这两个函数来实现dump opcode，来看看它的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">PHP_RINIT_FUNCTION</span><span class="token punctuation">(</span>vld<span class="token punctuation">)</span><span class="token punctuation">{</span>
    old_compile_file <span class="token operator">=</span> zend_compile_file<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>PHP_MAJOR_VERSION <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>PHP_MAJOR_VERSION <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> PHP_MINOR_VERSION <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>
    old_compile_string <span class="token operator">=</span> zend_compile_string<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    old_execute <span class="token operator">=</span> zend_execute<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">VLD_G</span><span class="token punctuation">(</span>active<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        zend_compile_file <span class="token operator">=</span> vld_compile_file<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>PHP_MAJOR_VERSION <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>PHP_MAJOR_VERSION <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> PHP_MINOR_VERSION <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>
        zend_compile_string <span class="token operator">=</span> vld_compile_string<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">VLD_G</span><span class="token punctuation">(</span>execute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            zend_execute <span class="token operator">=</span> vld_execute<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在vld_compile_file中完成HOOK:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> zend_op_array <span class="token operator">*</span><span class="token function">vld_compile_file</span><span class="token punctuation">(</span>zend_file_handle <span class="token operator">*</span>file_handle<span class="token punctuation">,</span> <span class="token keyword">int</span> type TSRMLS_DC<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    op_array <span class="token operator">=</span> <span class="token function">old_compile_file</span> <span class="token punctuation">(</span>file_handle<span class="token punctuation">,</span> type TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> op_array<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取opcode后将其格式化输出：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>op_array <span class="token operator">=</span> <span class="token function">old_compile_file</span> <span class="token punctuation">(</span>file_handle<span class="token punctuation">,</span> type TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>op_array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">vld_dump_oparray</span> <span class="token punctuation">(</span>op_array TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//格式化输出函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实APC、Opcache等opcode优化扩展都是用这种方式来实现的。</p><h2 id="读懂opcode" tabindex="-1"><a class="header-anchor" href="#读懂opcode" aria-hidden="true">#</a> 读懂opcode</h2><p>下面我们用vld生成一段opcode看看。PHP脚本如下：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token variable">$who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello, %s!&quot;</span><span class="token punctuation">,</span> <span class="token variable">$who</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行vld，输出：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>$ <span class="token operator">~</span>php <span class="token operator">-</span>dextension<span class="token operator">=</span>vld<span class="token operator">.</span>so <span class="token operator">-</span>dvld<span class="token operator">.</span>active<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>dvld<span class="token operator">.</span>verbosity<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">-</span>dvld<span class="token operator">.</span>execute<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">function</span><span class="token operator">.</span>php
filename<span class="token punctuation">:</span>       <span class="token keyword">function</span><span class="token operator">.</span>php
<span class="token keyword">function</span> name<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">)</span>
number of ops<span class="token punctuation">:</span>  <span class="token number">5</span>
compiled vars<span class="token punctuation">:</span>  none
line     <span class="token comment"># *  op                           fetch          ext  return  operands</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
   <span class="token number">2</span>     <span class="token number">0</span>  <span class="token operator">&gt;</span>   <span class="token constant">NOP</span>                                                      
   <span class="token number">6</span>     <span class="token number">1</span>      <span class="token constant">SEND_VAL</span>                                                 <span class="token string single-quoted-string">&#39;World&#39;</span>
         <span class="token number">2</span>      <span class="token constant">DO_FCALL</span>                                      <span class="token number">1</span>  <span class="token variable">$0</span>      <span class="token string single-quoted-string">&#39;hello&#39;</span>
         <span class="token number">3</span>      <span class="token keyword">ECHO</span>                                                     <span class="token variable">$0</span>
   <span class="token number">7</span>     <span class="token number">4</span>    <span class="token operator">&gt;</span> <span class="token keyword">RETURN</span>                                                   <span class="token number">1</span>

branch<span class="token punctuation">:</span> <span class="token comment">#  0; line:     2-    7; sop:     0; eop:     4</span>
path <span class="token comment">#1: 0, </span>
<span class="token keyword">Function</span> hello<span class="token punctuation">:</span>
filename<span class="token punctuation">:</span>      <span class="token keyword">function</span><span class="token operator">.</span>php
<span class="token keyword">function</span> name<span class="token punctuation">:</span>  hello
number of ops<span class="token punctuation">:</span>  <span class="token number">6</span>
compiled vars<span class="token punctuation">:</span>  <span class="token operator">!</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token variable">$who</span>
line     <span class="token comment"># *  op                           fetch          ext  return  operands</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
   <span class="token number">2</span>     <span class="token number">0</span>  <span class="token operator">&gt;</span>   <span class="token constant">RECV</span>                                                     <span class="token number">1</span>
   <span class="token number">3</span>     <span class="token number">1</span>      <span class="token constant">SEND_VAL</span>                                                 <span class="token string single-quoted-string">&#39;Hello%2C+%25s%21&#39;</span>
         <span class="token number">2</span>      <span class="token constant">SEND_VAR</span>                                                 <span class="token operator">!</span><span class="token number">0</span>
         <span class="token number">3</span>      <span class="token constant">DO_FCALL</span>                                      <span class="token number">2</span>  <span class="token variable">$0</span>      <span class="token string single-quoted-string">&#39;sprintf&#39;</span>
         <span class="token number">4</span>    <span class="token operator">&gt;</span> <span class="token keyword">RETURN</span>                                                   <span class="token variable">$0</span>
   <span class="token number">4</span>     <span class="token number">5</span><span class="token operator">*</span>   <span class="token operator">&gt;</span> <span class="token keyword">RETURN</span>                                                   <span class="token constant">null</span>

branch<span class="token punctuation">:</span> <span class="token comment">#  0; line:     2-    4; sop:     0; eop:     5</span>
path <span class="token comment">#1: 0, </span>
End of <span class="token keyword">function</span> hello<span class="token operator">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么去看呢？前面比较清晰，filename，function name 都是顾名思义。后面两行：</p><ol><li>number of ops：opcode的数量</li><li>compiled vars：PHP变量编译后的opcode表示形式，因为opcode不会使用变量的名字，而是使用变量的ID。比如后面的hello函数中，$who 对应着 !0</li></ol><p>接着是后面的表格，列名含义如下表：</p>`,17),b=n("thead",null,[n("tr",null,[n("th",null,"列名"),n("th",null,"含义")])],-1),h=n("tr",null,[n("td",null,"line"),n("td",null,"对应PHP脚本中的行数")],-1),f=n("tr",null,[n("td",null,"#"),n("td",null,"opcode编号")],-1),g=n("tr",null,[n("td",null,"*"),n("td",null,"貌似没用")],-1),y=n("td",null,"op",-1),P={href:"https://php.net/manual/en/internals2.opcodes.php#internals2.opcodes",target:"_blank",rel:"noopener noreferrer"},w=n("tr",null,[n("td",null,"fetch"),n("td",null,"不清楚")],-1),x=n("tr",null,[n("td",null,"ext"),n("td",null,"脚本执行所需要的其他信息")],-1),H=n("tr",null,[n("td",null,"return"),n("td",null,"返回值")],-1),O=n("tr",null,[n("td",null,"operands"),n("td",null,"操作数")],-1),R=p(`<p>其实这些列名对应着PHP内核中opcode结构体的成员变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_zend_op</span> <span class="token punctuation">{</span>
    <span class="token class-name">opcode_handler_t</span> handler<span class="token punctuation">;</span>
    znode_op op1<span class="token punctuation">;</span>  <span class="token comment">// op1和op2是operands</span>
    znode_op op2<span class="token punctuation">;</span>
    znode_op result<span class="token punctuation">;</span> <span class="token comment">//return</span>
    ulong extended_value<span class="token punctuation">;</span> <span class="token comment">//ext</span>
    uint lineno<span class="token punctuation">;</span> <span class="token comment">//line</span>
    zend_uchar opcode<span class="token punctuation">;</span> <span class="token comment">//opcode</span>
    zend_uchar op1_type<span class="token punctuation">;</span>
    zend_uchar op2_type<span class="token punctuation">;</span>
    zend_uchar result_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这段opcode的意思是：</p><ol><li>NOP是编译过程优化的结果，没什么意义。</li><li>把’World’作为参数传给后面的函数。</li><li>调用函数hello, 返回值为$0。</li><li>ECHO 输出$0。</li><li>函数结束返回。</li></ol><p>下一段是hello函数：</p><ol><li>接受传给函数的参数。</li><li>把’Hello%2C+%25s%21’作为参数传给后面的函数。</li><li>把!0作为参数传给后面的函数。</li><li>调用函数sprintf，返回值为$0。</li><li>函数返回$0。</li><li>函数结束。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在Webshell检测中，opcode可以：（这里只讨论opcode在webshell检测中的作用）</p><ol><li>辅助检测PHP后门/Webshell。 <ol><li>优点：作为静态分析的辅助手段，可以快速精确定位PHP脚本中可控函数及参数的调用。</li><li>缺点：需要人工维护关键字，无法应对变形马，如编码、ASCII运算等等。</li></ol></li><li>帮助我们更加深入地理解PHP内核机制，使我们可以修改PHP源码或者以扩展的形式来动态检测PHP后门/Webshell。（HOOK关键危险函数，如eval, assert等，当GPC参数进入危险函数及有相关危险操作时，判定为后门/Webshell） <ol><li>优点：上面写的缺点取反，并且误报率低，准确。</li><li>缺点：部署，维护成本高。</li></ol></li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,10),N={href:"http://www.laruence.com/2008/08/14/250.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://blog.pascal-martin.fr/post/php-obtenir-dump-opcodes.html",target:"_blank",rel:"noopener noreferrer"},S={href:"http://rancoud.com/read-phps-opcode/",target:"_blank",rel:"noopener noreferrer"},z={href:"http://www.php-internals.com/book/?p=chapt02/02-03-02-opcode",target:"_blank",rel:"noopener noreferrer"},C={href:"http://security.tencent.com/index.php/blog/msg/19",target:"_blank",rel:"noopener noreferrer"};function I(V,L){const a=c("ExternalLinkIcon");return t(),l("div",null,[i,u,d,k,n("blockquote",null,[n("p",null,[s("opcode在PHP内核中是如何生成的可以参考 : "),n("a",m,[s("http://www.php-internals.com/book/?p=chapt02/02-03-02-opcode"),e(a)])])]),n("p",null,[s("我们可以通过PHP扩展vld来查看PHP脚本的opcode，可以参考：("),n("a",v,[s("http://blog.csdn.net/21aspnet/article/details/7002644)"),e(a)]),s(")")]),_,n("table",null,[b,n("tbody",null,[h,f,g,n("tr",null,[y,n("td",null,[s("使用的Opcode，见："),n("a",P,[s("https://php.net/manual/en/internals2.opcodes.php#internals2.opcodes"),e(a)])])]),w,x,H,O])]),R,n("ol",null,[n("li",null,[n("a",N,[s("http://www.laruence.com/2008/08/14/250.html"),e(a)])]),n("li",null,[n("a",E,[s("http://blog.pascal-martin.fr/post/php-obtenir-dump-opcodes.html"),e(a)])]),n("li",null,[n("a",S,[s("http://rancoud.com/read-phps-opcode/"),e(a)])]),n("li",null,[n("a",z,[s("http://www.php-internals.com/book/?p=chapt02/02-03-02-opcode"),e(a)])]),n("li",null,[n("a",C,[s("http://security.tencent.com/index.php/blog/msg/19"),e(a)])])])])}const A=o(r,[["render",I],["__file","读懂PHP opcode及其在webshell检测中的应用.html.vue"]]);export{A as default};
